use clap::Parser;
use reqwest;
use reqwest::{Response, Error};
use serde::Deserialize;

#[tokio::main]
async fn main() {
    let args = Args::parse();
    let uri = format!(
        "https://api.openweathermap.org/data/2.5/weather?lat={}&lon={}&units={}&appid={}",
        args.latitude,
        args.longitude,
        args.units,
        args.key,
    );

    let res = get_response(uri).await.unwrap();
    let json = res.json::<Data>().await.unwrap();
}

#[derive(Parser)]
struct Args {
    #[arg(long)]
    latitude: String,
    #[arg(long)]
    longitude: String,
    #[arg(long)]
    units: String,
    #[arg(long)]
    key: String,
}

#[allow(dead_code)]
#[derive(Deserialize)]
struct Coord {
    lon: f32,
    lat: f32,
}

#[allow(dead_code)]
#[derive(Deserialize)]
struct WeatherData {
    data: Weather
}

#[allow(dead_code)]
#[derive(Deserialize)]
struct Weather {
    id: i32,
    main: String, 
    description: String, 
    icon: String, 
}

#[allow(dead_code)]
#[derive(Deserialize)]
struct Main {
    temp: f32,
    feels_like: f32, 
    temp_min: f32, 
    temp_max: f32, 
    pressure: i32, 
    humidity: i32, 
    sea_level: i32, 
    grnd_level: i32, 
}

#[allow(dead_code)]
#[derive(Deserialize)]
struct Wind {
    speed: f32,
    deg: i32, 
    gust: f32, 
}

#[allow(dead_code)]
#[derive(Deserialize)]
struct Clouds {
    all: i32,
}

#[allow(dead_code)]
#[derive(Deserialize)]
struct Sys {
    country: String,
    sunrise: i32,
    sunset: i32,
}

#[allow(dead_code)]
#[derive(Deserialize)]
struct Data {
    coord: Coord,
    weather: WeatherData,
    base: String,
    main: Main,
    visibility: i32,
    wind: Wind,
    clouds: Clouds,
    dt: i32,
    sys: Sys,
    timezone: i32,
    id: i32,
    name: String,
    cod: i32,
}

async fn get_response(uri: String) -> Result<Response, Error> {
    reqwest::get(uri).await
}
